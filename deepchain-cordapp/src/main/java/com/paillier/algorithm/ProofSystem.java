package com.paillier.algorithm;

import com.paillier.entity.ProofCDEntity;
import com.paillier.entity.ProofPKEntity;
import com.paillier.utils.PaillierUtils;

import java.math.BigInteger;

/**
 * Created by jessy on 2019/6/3.
 */
public class ProofSystem {
    private BigInteger n;
    private int bitlength;

    public ProofSystem(int bitlength, BigInteger n) {
        this.bitlength = bitlength;
        this.n = n;
    }

    /**
     * generate a proof that proves a ciphertext is encrypted correctly
     * @param cipher
     * @param gElem
     * @param m
     * @param r
     * @return
     */
    public ProofPKEntity generatePKProof(BigInteger cipher, BigInteger gElem, BigInteger m, BigInteger r){
        ProofPKEntity entity = new ProofPKEntity();
        //announcement
        BigInteger a = PaillierUtils.randomSelectZn(bitlength, n);
        BigInteger u = PaillierUtils.randomSelectZn(bitlength,n);
        BigInteger nsquare = n.multiply(n);
        BigInteger A = (gElem.modPow(a, nsquare)).multiply(u.modPow(n, nsquare)).mod(nsquare);
        entity.setProof_a(a);
        entity.setProof_u(u);
        entity.setProof_N(n);
        entity.setProof_upA(A);
        entity.setgElem(gElem);
        //challenge
        BigInteger c = cipher.add(entity.getProof_upA()).mod(nsquare);
        entity.setProof_c(c);
        //response
        BigInteger t = (a.add(c.multiply(m)).divide(n)).mod(nsquare);
        BigInteger d = a.add(c.multiply(m)).mod(nsquare);
        BigInteger e_1_temp = r.modPow(c,nsquare);
        BigInteger e_2_temp = gElem.modPow(t,nsquare);
        BigInteger e = u.multiply(e_1_temp).mod(nsquare).multiply(e_2_temp).mod(nsquare);
        entity.setProof_d(d);
        entity.setProof_e(e);
        return entity;
    }

    /**
     * verify whether a ciphertext is encrypted correctly
     * @param entity
     * @param cipher
     * @return
     */
    public boolean verifyPKProof(ProofPKEntity entity, BigInteger cipher){
        //verify challenge
        BigInteger c = entity.getProof_c();
        BigInteger nsquare = entity.getProof_N().multiply(entity.getProof_N());
        BigInteger temp = cipher.add(entity.getProof_upA()).mod(nsquare);
        if(c.compareTo(temp) == 0){
            //verify cipher

            BigInteger left = entity.getgElem().modPow(entity.getProof_d(), nsquare).multiply(entity.getProof_e().modPow(entity.getProof_N(),nsquare)).mod(nsquare);
            BigInteger right = entity.getProof_upA().multiply(cipher.modPow(c,nsquare)).mod(nsquare);
            return (left.compareTo(right) == 0);
        }else
            return false;
    }

    /***
     * generate a proof that proves a cipher share is correct
     * @param cipher
     * @param cipher_i generated by the party who owns secretShare on cipher
     * @param delta
     * @param secretShare
     * @return
     */
    public ProofCDEntity generateCDProof(BigInteger cipher, BigInteger cipher_i, BigInteger delta, BigInteger secretShare){
        ProofCDEntity entity = new ProofCDEntity();

        BigInteger nsquare = n.multiply(n);
        BigInteger v = cipher.modPow(BigInteger.valueOf(4), nsquare);
        BigInteger vi = cipher_i.modPow(BigInteger.valueOf(2), nsquare);
        entity.setProof_v(v);
        entity.setProof_vi(vi);
        entity.setFake(v.modPow(delta.multiply(secretShare),nsquare));
//        System.out.println(vi.compareTo(v.modPow(delta.multiply(secretShare),nsquare))==0);
        //announcement
        BigInteger u = PaillierUtils.randomSelectZn(bitlength, n);

        BigInteger a = cipher.modPow(BigInteger.valueOf(4).multiply(u),nsquare);
        entity.setProof_a(a);
        BigInteger b = v.modPow(u, nsquare);
        entity.setProof_b(b);
        //challenge
        BigInteger c = BigInteger.ONE/*(cipher.add(cipher_i).add(v).add(vi).add(a).add(b)).mod(nsquare)*/;
        entity.setProof_c(c);
        //response
        BigInteger r = u.add(c.multiply(delta.multiply(secretShare))).mod(nsquare);
        entity.setProof_r(r);
        return entity;
    }

    /**
     * verify a cipher share is correct
     * @param entity
//     * @param cipher
//     * @param cipher_i
     * @return
     */
    public boolean verifyCDProof(ProofCDEntity entity
//            , BigInteger cipher, BigInteger cipher_i
    ){

        BigInteger r = entity.getProof_r();
        BigInteger nsquare = n.multiply(n);
        BigInteger left_1 = entity.getFake()/*cipher.modPow(BigInteger.valueOf(4).multiply(r).mod(nsquare),nsquare)*/;
        BigInteger a = entity.getProof_a();
        BigInteger c = entity.getProof_c();
        BigInteger right_1 = entity.getProof_vi()/*a.multiply(cipher_i.modPow(BigInteger.valueOf(2).multiply(c).mod(nsquare),nsquare)).mod(nsquare)*/;

        /*BigInteger v = entity.getProof_v();
        BigInteger vi = entity.getProof_vi();
        BigInteger left_2 = v.modPow(r,nsquare);
        BigInteger b = entity.getProof_b();
        BigInteger right_2 = b.multiply(vi.modPow(c,nsquare));*/

        return (left_1.compareTo(right_1) == 0);
    }

}
